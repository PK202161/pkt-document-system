import React, { useState, useEffect } from 'react';
import {
  Upload,
  Card,
  Button,
  Select,
  Progress,
  Alert,
  Typography,
  Space,
  Row,
  Col,
  message,
  List,
  Tag,
  Divider,
  Steps,
  Result,
  Modal,
  Table
} from 'antd';
import {
  InboxOutlined,
  UploadOutlined,
  FileTextOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  DeleteOutlined,
  EyeOutlined,
  ArrowRightOutlined,
  ClockCircleOutlined,
  WarningOutlined,
  BulbOutlined,
  SyncOutlined
} from '@ant-design/icons';
import type { UploadProps, UploadFile } from 'antd';
import axios from 'axios';

const { Dragger } = Upload;
const { Title, Text } = Typography;
const { Step } = Steps;

interface UploadResponse {
  success: boolean;
  message: string;
  document?: {
    id: number;
    docNumber: string;
    docType: string;
    fileName: string;
  };
}

interface ProcessedFile {
  file: UploadFile;
  status: 'waiting' | 'uploading' | 'success' | 'error';
  result?: UploadResponse;
  progress: number;
  detectedType?: string;
  detectedNumber?: string;
  typeMatch: boolean;
}

interface FileTypeInfo {
  fileName: string;
  detectedType: string | null;
  detectedNumber: string | null;
  confidence: 'high' | 'medium' | 'low';
  reason: string;
}

interface DocumentUploadProps {
  onUploadSuccess?: () => void; // Callback เมื่อ upload สำเร็จ
}

const DocumentUpload: React.FC<DocumentUploadProps> = ({ onUploadSuccess }) => {
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [processedFiles, setProcessedFiles] = useState<ProcessedFile[]>([]);
  const [currentUploadIndex, setCurrentUploadIndex] = useState<number>(-1);
  const [isProcessing, setIsProcessing] = useState(false);
  const [fileTypeAnalysis, setFileTypeAnalysis] = useState<FileTypeInfo[]>([]);

  // Auto-detect document type from filename
  const detectDocumentType = (fileName: string): { 
    type: string | null; 
    number: string | null;
    confidence: 'high' | 'medium' | 'low'; 
    reason: string;
  } => {
    const name = fileName.toUpperCase();
    
    // High confidence patterns - เอกสารหลัก (Primary Documents)
    const primaryPatterns = [
      { regex: /^(SO\d{7})/, type: 'SO', reason: 'ชื่อไฟล์ขึ้นต้นด้วย SO + เลข 7 หลัก' },
      { regex: /^(EN\d{7})/, type: 'EN', reason: 'ชื่อไฟล์ขึ้นต้นด้วย EN + เลข 7 หลัก' },
      { regex: /^(SH\d{7})/, type: 'SH', reason: 'ชื่อไฟล์ขึ้นต้นด้วย SH + เลข 7 หลัก' }
    ];

    for (const pattern of primaryPatterns) {
      const match = name.match(pattern.regex);
      if (match) {
        return { 
          type: pattern.type, 
          number: match[1],
          confidence: 'high', 
          reason: pattern.reason
        };
      }
    }

    // Medium confidence patterns - รูปแบบเดิม
    const legacyPatterns = [
      { regex: /(SO_|_SO_)/, type: 'SO', reason: 'ชื่อไฟล์มี SO_ (รูปแบบเดิม)' },
      { regex: /(EN_|_EN_)/, type: 'EN', reason: 'ชื่อไฟล์มี EN_ (รูปแบบเดิม)' },
      { regex: /(SH_|_SH_)/, type: 'SH', reason: 'ชื่อไฟล์มี SH_ (รูปแบบเดิม)' }
    ];

    for (const pattern of legacyPatterns) {
      if (name.match(pattern.regex)) {
        return { 
          type: pattern.type, 
          number: null,
          confidence: 'medium', 
          reason: pattern.reason
        };
      }
    }

    // Low confidence patterns - คำสำคัญ
    const keywordPatterns = [
      { keywords: ['สั่งขาย', 'ORDER'], type: 'SO', reason: 'ชื่อไฟล์มีคำว่า สั่งขาย หรือ ORDER' },
      { keywords: ['เบิก', 'โครงการ', 'PROJECT'], type: 'EN', reason: 'ชื่อไฟล์มีคำว่า เบิก หรือ โครงการ' },
      { keywords: ['สาขา', 'BRANCH', 'SHIP'], type: 'SH', reason: 'ชื่อไฟล์มีคำว่า สาขา หรือ BRANCH' }
    ];

    for (const pattern of keywordPatterns) {
      if (pattern.keywords.some(keyword => name.includes(keyword))) {
        return { 
          type: pattern.type, 
          number: null,
          confidence: 'medium', 
          reason: pattern.reason
        };
      }
    }

    return { 
      type: null, 
      number: null,
      confidence: 'low', 
      reason: 'ไม่สามารถตรวจจับประเภทได้จากชื่อไฟล์'
    };
  };

  // Analyze files when file list changes
  useEffect(() => {
    if (fileList.length > 0) {
      const analysis: FileTypeInfo[] = fileList.map(file => {
        const detection = detectDocumentType(file.name);
        return {
          fileName: file.name,
          detectedType: detection.type,
          detectedNumber: detection.number,
          confidence: detection.confidence,
          reason: detection.reason
        };
      });
      
      setFileTypeAnalysis(analysis);
    } else {
      setFileTypeAnalysis([]);
    }
  }, [fileList]);

  const uploadProps: UploadProps = {
    name: 'xmlFile',
    multiple: true,
    accept: '.xml',
    fileList,
    onChange: (info) => {
      // ป้องกันการเปลี่ยนแปลง fileList เมื่อกำลัง processing หรือเสร็จสิ้นแล้ว
      if (!isProcessing && processedFiles.length === 0) {
        setFileList(info.fileList);
      }
    },
    onRemove: (file) => {
      // ป้องกันการลบไฟล์เมื่อกำลัง processing หรือเสร็จสิ้นแล้ว
      if (isProcessing || processedFiles.length > 0) {
        message.warning('ไม่สามารถลบไฟล์ได้ขณะนี้');
        return false;
      }
      
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
      
      // Remove from processed files too
      setProcessedFiles(prev => 
        prev.filter(pf => pf.file.uid !== file.uid)
      );
    },
    beforeUpload: (file) => {
      // ป้องกันการอัปโหลดเมื่อกำลัง processing หรือเสร็จสิ้นแล้ว
      if (isProcessing || processedFiles.length > 0) {
        message.warning('กรุณารอให้การประมวลผลเสร็จสิ้น หรือคลิก "เริ่มอัปโหลดใหม่"');
        return false;
      }

      // Validate file type
      const isXML = file.type === 'text/xml' || file.name.toLowerCase().endsWith('.xml');
      if (!isXML) {
        message.error(`${file.name} ไม่ใช่ไฟล์ XML`);
        return false;
      }

      // Validate file size (5MB max)
      const isLt5M = file.size / 1024 / 1024 < 5;
      if (!isLt5M) {
        message.error(`${file.name} ขนาดไฟล์ต้องไม่เกิน 5MB`);
        return false;
      }

      return false; // Prevent auto upload
    },
    onDrop(e) {
      console.log('Dropped files', e.dataTransfer.files);
    },
  };

  const handleStartProcessing = async () => {
    if (fileList.length === 0) {
      message.warning('กรุณาเลือกไฟล์ XML');
      return;
    }

    // Check if all files have detected types
    const filesWithoutDetection = fileTypeAnalysis.filter(
      analysis => !analysis.detectedType || analysis.confidence === 'low'
    );

    if (filesWithoutDetection.length > 0) {
      const proceed = await new Promise((resolve) => {
        Modal.confirm({
          title: '⚠️ พบไฟล์ที่ไม่สามารถตรวจจับประเภทได้',
          content: (
            <div>
              <p>ไฟล์เหล่านี้ไม่สามารถตรวจจับประเภทเอกสารได้:</p>
              <ul>
                {filesWithoutDetection.map(f => (
                  <li key={f.fileName}>
                    <strong>{f.fileName}</strong> - {f.reason}
                  </li>
                ))}
              </ul>
              <p>กรุณาตรวจสอบชื่อไฟล์ให้ตรงตามรูปแบบมาตรฐาน</p>
            </div>
          ),
          okText: 'ดำเนินการต่อ',
          cancelText: 'ยกเลิก',
          okType: 'danger',
          onOk: () => resolve(true),
          onCancel: () => resolve(false)
        });
      });

      if (!proceed) return;
    }

    setIsProcessing(true);
    setCurrentUploadIndex(0);
    
    // Initialize processed files with type detection info
    const initialProcessed: ProcessedFile[] = fileList.map((file, index) => {
      const analysis = fileTypeAnalysis[index];
      return {
        file,
        status: 'waiting',
        progress: 0,
        detectedType: analysis?.detectedType || undefined,
        detectedNumber: analysis?.detectedNumber || undefined,
        typeMatch: true // Always true now since we use detected type
      };
    });
    setProcessedFiles(initialProcessed);

    // Process files one by one
    for (let i = 0; i < fileList.length; i++) {
      setCurrentUploadIndex(i);
      await uploadSingleFile(fileList[i], i);
      
      // Small delay between uploads for better UX
      if (i < fileList.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    setIsProcessing(false);
    setCurrentUploadIndex(-1);
    
    const successCount = processedFiles.filter(pf => pf.status === 'success').length;
    const failCount = processedFiles.filter(pf => pf.status === 'error').length;
    
    message.success(`การประมวลผลเสร็จสิ้น: สำเร็จ ${successCount} ไฟล์, ล้มเหลว ${failCount} ไฟล์`);
    
    // เรียก callback เพื่อ refresh หน้าจัดการเอกสาร
    if (successCount > 0 && onUploadSuccess) {
      setTimeout(() => {
        onUploadSuccess();
        message.info('รีเฟรชข้อมูลเอกสารแล้ว');
      }, 1000);
    }

    // Reset component state หลัง upload สำเร็จ
    setTimeout(() => {
      console.log('🔄 Resetting upload component...');
      setFileList([]);
      setProcessedFiles([]);
      setFileTypeAnalysis([]);
      setCurrentUploadIndex(-1);
      setIsProcessing(false);
      
      // Reset file input ด้วย (force re-render)
      const fileInputs = document.querySelectorAll('input[type="file"]');
      fileInputs.forEach((input: any) => {
        input.value = '';
      });
      
      message.success('🔄 พร้อมอัปโหลดไฟล์ใหม่แล้ว!');
    }, 2000); // รอ 2 วินาทีหลัง upload เสร็จ
  };

  const uploadSingleFile = async (file: UploadFile, index: number): Promise<void> => {
    // Update status to uploading
    setProcessedFiles(prev => prev.map((pf, i) => 
      i === index ? { ...pf, status: 'uploading', progress: 0 } : pf
    ));

    let controller: AbortController | null = null;

    try {
      const token = localStorage.getItem('token') || sessionStorage.getItem('token');
      const formData = new FormData();
      formData.append('xmlFile', file.originFileObj as File);
      
      // Use detected type instead of selected type
      const analysis = fileTypeAnalysis[index];
      const documentType = analysis?.detectedType || 'SO'; // fallback to SO if no detection
      
      formData.append('docType', documentType);

      // Add detected document number if available
      if (analysis?.detectedNumber) {
        formData.append('docNumber', analysis.detectedNumber);
      }

      // Create abort controller for cleanup
      controller = new AbortController();

      const response = await axios.post<UploadResponse>(
        'http://localhost:3004/api/documents/upload',
        formData,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'multipart/form-data',
          },
          signal: controller.signal,
          timeout: 30000, // 30 second timeout
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round(
              (progressEvent.loaded * 100) / (progressEvent.total || 1)
            );
            
            setProcessedFiles(prev => prev.map((pf, i) => 
              i === index ? { ...pf, progress: percentCompleted } : pf
            ));
          },
        }
      );

      if (response.data.success) {
        setProcessedFiles(prev => prev.map((pf, i) => 
          i === index ? { 
            ...pf, 
            status: 'success', 
            progress: 100,
            result: response.data 
          } : pf
        ));
        
        message.success(`${file.name} อัปโหลดสำเร็จ`);
      } else {
        throw new Error(response.data.message);
      }
    } catch (error: any) {
      console.error('Upload error:', error);
      
      setProcessedFiles(prev => prev.map((pf, i) => 
        i === index ? { 
          ...pf, 
          status: 'error', 
          progress: 0,
          result: { 
            success: false, 
            message: error.response?.data?.message || 'อัปโหลดไม่สำเร็จ' 
          }
        } : pf
      ));
      
      const errorMessage = error.response?.data?.message || 'เกิดข้อผิดพลาดในการอัปโหลด';
      message.error(`${file.name}: ${errorMessage}`);
    } finally {
      // Cleanup - ปิด controller และ clear references
      if (controller) {
        controller.abort();
      }
      
      // Force garbage collection ของ file references
      if (file.originFileObj) {
        try {
          // Clear file reference
          (file as any).originFileObj = null;
        } catch (e) {
          // Silent fail
        }
      }
      
      // Small delay to allow cleanup
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  };

  const clearAll = () => {
    setFileList([]);
    setProcessedFiles([]);
    setCurrentUploadIndex(-1);
    setIsProcessing(false);
    setFileTypeAnalysis([]);
    
    // Reset file input elements
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach((input: any) => {
      input.value = '';
    });
    
    message.success('🗑️ ล้างข้อมูลแล้ว พร้อมอัปโหลดใหม่!');
  };

  // เพิ่ม function สำหรับ reset หลัง upload สำเร็จ
  const resetForNewUpload = () => {
    console.log('🔄 Manual reset triggered...');
    setFileList([]);
    setProcessedFiles([]);
    setFileTypeAnalysis([]);
    setCurrentUploadIndex(-1);
    setIsProcessing(false);
    
    // Reset file input elements
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach((input: any) => {
      input.value = '';
    });
    
    message.success('🆕 พร้อมอัปโหลดไฟล์ใหม่แล้ว!');
  };

  const getDocTypeColor = (type: string) => {
    switch (type) {
      case 'SO': return '#1890ff';
      case 'EN': return '#52c41a';
      case 'SH': return '#fa8c16';
      default: return '#d9d9d9';
    }
  };

  const getDocTypeLabel = (type: string) => {
    switch (type) {
      case 'SO': return 'ใบสั่งขาย';
      case 'EN': return 'ใบเบิกโครงการ';
      case 'SH': return 'ใบสั่งขายสาขา';
      default: return type;
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div>
      {/* Header */}
      <Row style={{ marginBottom: 24 }}>
        <Col span={24}>
          <Title level={2} style={{ marginBottom: 8 }}>
            📁 อัปโหลดเอกสาร XML
          </Title>
        </Col>
      </Row>

      {/* Upload Configuration - Simplified */}
      {fileList.length > 0 && !isProcessing && processedFiles.length === 0 && (
        <Card 
          style={{ marginBottom: 24 }}
          size="small"
        >
          <Row gutter={[16, 16]} align="middle">
            <Col xs={24}>
              <Space>
                <Button
                  type="primary"
                  icon={<ArrowRightOutlined />}
                  onClick={handleStartProcessing}
                  loading={isProcessing}
                  disabled={fileList.length === 0}
                  size="large"
                >
                  {isProcessing ? 'กำลังประมวลผล...' : `เริ่มประมวลผล ${fileList.length} ไฟล์`}
                </Button>
                <Button
                  icon={<DeleteOutlined />}
                  onClick={clearAll}
                  disabled={isProcessing}
                >
                  ล้างทั้งหมด
                </Button>
              </Space>
            </Col>
          </Row>
        </Card>
      )}

      {/* Upload Area */}
      <Card
        title={
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <InboxOutlined style={{ marginRight: 8, color: '#1890ff' }} />
            เลือกไฟล์ XML
          </div>
        }
        style={{ marginBottom: 24 }}
      >
        <Dragger 
          {...uploadProps} 
          style={{ 
            padding: '40px 20px',
            opacity: (isProcessing || processedFiles.length > 0) ? 0.5 : 1
          }} 
          disabled={isProcessing || processedFiles.length > 0}
        >
          <p className="ant-upload-drag-icon">
            <InboxOutlined style={{ 
              fontSize: 48, 
              color: (isProcessing || processedFiles.length > 0) ? '#d9d9d9' : '#1890ff' 
            }} />
          </p>
          <p className="ant-upload-text" style={{ fontSize: 16 }}>
            {(isProcessing || processedFiles.length > 0) ? 
              'กำลังประมวลผล หรือเสร็จสิ้นแล้ว...' : 
              'ลากไฟล์ XML มาวางที่นี่ หรือคลิกเพื่อเลือกไฟล์'
            }
          </p>
          <p className="ant-upload-hint" style={{ color: '#999' }}>
            {(isProcessing || processedFiles.length > 0) ? 
              'กรุณารอให้การประมวลผลเสร็จสิ้น หรือคลิก "อัปโหลดไฟล์ใหม่" เพื่อเริ่มใหม่' :
              'ระบบจะตรวจจับประเภทเอกสาร (SO, EN, SH) และหมายเลขจากชื่อไฟล์อัตโนมัติ • ไฟล์ XML ขนาดไม่เกิน 5MB'
            }
          </p>
        </Dragger>

        {/* แสดงปุ่ม Reset ถ้าต้องการเริ่มใหม่ */}
        {(processedFiles.length > 0 || isProcessing) && (
          <div style={{ textAlign: 'center', marginTop: 16 }}>
            <Button 
              type="dashed" 
              onClick={resetForNewUpload}
              disabled={isProcessing}
              icon={<ArrowRightOutlined />}
            >
              🆕 เริ่มอัปโหลดใหม่
            </Button>
          </div>
        )}
      </Card>

      {/* File Analysis Table */}
      {fileTypeAnalysis.length > 0 && !isProcessing && (
        <Card
          title="🔍 การวิเคราะห์ไฟล์"
          style={{ marginBottom: 24 }}
          size="small"
        >
          <Table
            dataSource={fileTypeAnalysis.map((analysis, index) => ({
              key: index,
              ...analysis
            }))}
            pagination={false}
            size="small"
            columns={[
              {
                title: 'ชื่อไฟล์',
                dataIndex: 'fileName',
                key: 'fileName',
                render: (fileName: string) => (
                  <Text strong>{fileName}</Text>
                )
              },
              {
                title: 'ประเภทที่ตรวจจับ',
                dataIndex: 'detectedType',
                key: 'detectedType',
                render: (type: string | null, record: any) => {
                  if (!type) {
                    return <Text type="secondary">ไม่สามารถตรวจจับได้</Text>;
                  }
                  return (
                    <Space direction="vertical" size={2}>
                      <Space>
                        <Tag color={getDocTypeColor(type)}>{getDocTypeLabel(type)}</Tag>
                        <Tag color={record.confidence === 'high' ? 'green' : 'orange'}>
                          {record.confidence === 'high' ? 'มั่นใจสูง' : 'มั่นใจปานกลาง'}
                        </Tag>
                      </Space>
                      {record.detectedNumber && (
                        <Text type="secondary" style={{ fontSize: '11px' }}>
                          หมายเลข: {record.detectedNumber}
                        </Text>
                      )}
                    </Space>
                  );
                }
              },
              {
                title: 'เหตุผล',
                dataIndex: 'reason',
                key: 'reason',
                render: (reason: string) => (
                  <Text type="secondary" style={{ fontSize: '12px' }}>{reason}</Text>
                )
              }
            ]}
          />
        </Card>
      )}

      {/* Processing Status */}
      {isProcessing && processedFiles.length > 0 && (
        <Card 
          title="🔄 สถานะการประมวลผล"
          style={{ marginBottom: 24 }}
        >
          <Steps
            direction="vertical"
            size="small"
            current={currentUploadIndex}
          >
            {processedFiles.map((pf, index) => (
              <Step
                key={pf.file.uid}
                title={
                  <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                    <span>{pf.file.name}</span>
                    {pf.detectedType && (
                      <Tag 
                        style={{ fontSize: '11px' }}
                        color={getDocTypeColor(pf.detectedType)}
                      >
                        {pf.detectedType}
                      </Tag>
                    )}
                  </div>
                }
                description={
                  <div>
                    <Text type="secondary">
                      {formatFileSize(pf.file.size || 0)}
                      {pf.detectedType && ` • ${getDocTypeLabel(pf.detectedType)}`}
                    </Text>
                    {pf.detectedNumber && (
                      <Text type="secondary" style={{ display: 'block', fontSize: '11px' }}>
                        หมายเลข: {pf.detectedNumber}
                      </Text>
                    )}
                    {pf.status === 'uploading' && (
                      <Progress 
                        percent={pf.progress} 
                        size="small" 
                        style={{ marginTop: 4 }}
                      />
                    )}
                    {pf.status === 'success' && pf.result && (
                      <Text type="success" style={{ display: 'block', fontSize: '12px' }}>
                        ✅ {pf.result.message}
                      </Text>
                    )}
                    {pf.status === 'error' && pf.result && (
                      <Text type="danger" style={{ display: 'block', fontSize: '12px' }}>
                        ❌ {pf.result.message}
                      </Text>
                    )}
                  </div>
                }
                status={
                  pf.status === 'success' ? 'finish' :
                  pf.status === 'error' ? 'error' :
                  pf.status === 'uploading' ? 'process' : 'wait'
                }
                icon={
                  pf.status === 'waiting' ? <ClockCircleOutlined /> :
                  pf.status === 'uploading' ? <UploadOutlined /> :
                  pf.status === 'success' ? <CheckCircleOutlined /> :
                  <ExclamationCircleOutlined />
                }
              />
            ))}
          </Steps>
        </Card>
      )}

      {/* Results Summary */}
      {!isProcessing && processedFiles.length > 0 && (
        <Card title="📊 สรุปผลการประมวลผล">
          <Row gutter={[16, 16]}>
            <Col xs={8}>
              <Card size="small">
                <div style={{ textAlign: 'center' }}>
                  <Text type="secondary">ทั้งหมด</Text>
                  <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1890ff' }}>
                    {processedFiles.length}
                  </div>
                </div>
              </Card>
            </Col>
            <Col xs={8}>
              <Card size="small">
                <div style={{ textAlign: 'center' }}>
                  <Text type="secondary">สำเร็จ</Text>
                  <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#52c41a' }}>
                    {processedFiles.filter(pf => pf.status === 'success').length}
                  </div>
                </div>
              </Card>
            </Col>
            <Col xs={8}>
              <Card size="small">
                <div style={{ textAlign: 'center' }}>
                  <Text type="secondary">ล้มเหลว</Text>
                  <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#f5222d' }}>
                    {processedFiles.filter(pf => pf.status === 'error').length}
                  </div>
                </div>
              </Card>
            </Col>
          </Row>

          {processedFiles.filter(pf => pf.status === 'success').length === processedFiles.length && (
            <Result
              status="success"
              title="ประมวลผลเสร็จสิ้น!"
              subTitle={`อัปโหลดเอกสาร ${processedFiles.length} ไฟล์สำเร็จทั้งหมด`}
              extra={[
                <Button type="primary" key="upload-new" onClick={resetForNewUpload} size="large">
                  📁 อัปโหลดไฟล์ใหม่
                </Button>,
                <Button key="view-docs" onClick={() => onUploadSuccess && onUploadSuccess()}>
                  📋 ดูรายการเอกสาร
                </Button>
              ]}
              style={{ marginTop: 24 }}
            />
          )}

          {/* แสดงปุ่ม Reset ถ้ามีไฟล์ที่ error */}
          {processedFiles.filter(pf => pf.status === 'error').length > 0 && (
            <div style={{ textAlign: 'center', marginTop: 16 }}>
              <Button type="default" onClick={resetForNewUpload} icon={<ArrowRightOutlined />}>
                🔄 ลองอัปโหลดใหม่
              </Button>
            </div>
          )}
        </Card>
      )}
    </div>
  );
};

export default DocumentUpload;
